openapi: 3.0.0
info:
  title: Folio Query Tool API
  version: v1
  description: Folio Query Tool API

paths:
  /entity-types/{entityTypeId}:
    get:
      operationId: getEntityType
      description: Get definition of an Entity Type.
      tags:
        - entity-types
      parameters:
        - $ref: '#/components/parameters/entityTypeId'
      responses:
        '200':
          description: 'Definition of the requested entity type'
          content:
            application/json:
              example: examples/entityTypeDefinition.sample
              schema:
                $ref: '#/components/schemas/entityType'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /entity-types/{entityTypeId}/columns/{columnName}/values:
    get:
      operationId: getColumnValues
      description: Get values of an entity type column.
      tags:
        - entity-types
      parameters:
        - $ref: '#/components/parameters/entityTypeId'
        - $ref: '#/components/parameters/columnName'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: 'Values of an entity type column'
          content:
            application/json:
              example: examples/columnValues.sample
              schema:
                $ref: '#/components/schemas/columnValues'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /query:
    get:
      operationId: runFqlQuery
      description: Runs an FQL query
      tags:
        - fqlQuery
      parameters:
        - $ref: '#/components/parameters/fqlQuery'
        - $ref: '#/components/parameters/entityTypeIdQueryParam'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/afterId'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Query result
          content:
            application/json:
              example: examples/resultsetPage.sample
              schema:
                $ref: '#/components/schemas/resultsetPage'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
    post:
      operationId: runFqlQueryAsync
      description: Runs an FQL query asynchronously
      tags:
        - fqlQuery
      requestBody:
        description: Query request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitQuery'
      responses:
        '200':
          description: 'The identifier for the query run'
          content:
            application/json:
              example: examples/queryIdentifier.sample
              schema:
                $ref: '#/components/schemas/queryIdentifier'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /query/{queryId}:
    get:
      operationId: getQuery
      description: Get details of a submitted query, optionally including the results
      tags:
        - fqlQuery
      parameters:
        - $ref: '#/components/parameters/queryId'
        - $ref: '#/components/parameters/includeResults'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 'Details of the submitted query'
          content:
            application/json:
              example: examples/queryDetails.sample
              schema:
                $ref: '#/components/schemas/queryDetails'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
    delete:
      operationId: deleteQuery
      description: Delete a query and its results
      tags:
        - fqlQuery
      parameters:
        - $ref: '#/components/parameters/queryId'
      responses:
        '204':
          description: Query has been deleted
        '404':
          description: Query with id not found

components:
  parameters:
    entityTypeId:
      name: entityTypeId
      in: path
      required: true
      description: UUID of the entity type
      schema:
        $ref: '#/components/schemas/UUID'
    entityTypeIdQueryParam:
      name: entityTypeId
      in: query
      required: true
      description: UUID of the entity type
      schema:
        $ref: '#/components/schemas/UUID'
    columnName:
      name: columnName
      in: path
      required: true
      description: Name of an entity type column
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      description: A search text that can be used to filter column values. If provided, only the values that begins with the given text will be returned in API response.
      schema:
        type: string
    queryId:
      name: queryId
      in: path
      required: true
      description: UUID of the query
      schema:
        $ref: '#/components/schemas/UUID'
    includeResults:
      name: includeResults
      in: query
      required: false
      description: Indicates if query results has to be included in the query details response
      schema:
        type: boolean
    fqlQuery:
      name: query
      in: query
      schema:
        type: string
      required: true
      description: A complete query expressed as a FQL string. It should contain the from part that defines the entity type and the where/criteria part.
    fields:
      name: fields
      in: query
      schema:
        type: array
        items:
          type: string
      required: false
      description: fields to include in the query results
    offset:
      name: offset
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
        maximum: 2147483647
      required: false
      description: Skip over a number of elements by specifying an offset value for the query
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 100
        minimum: 1
        maximum: 2147483647
      required: false
      description: Limit the number of elements returned in the response
    afterId:
      name: afterId
      in: query
      schema:
        $ref: '#/components/schemas/UUID'
      required: false
      description: ID of the last element from the previous query

  schemas:
    UUID:
      $ref: schemas/common.json#/UUID
    entityType:
      $ref: schemas/entityType.json#/EntityType
    entityDataType:
      $ref: schemas/entityDataType.json#/EntityDataType
    stringType:
      $ref: schemas/entityDataType.json#/StringType
    rangedUUIDType:
      $ref: schemas/entityDataType.json#/RangedUUIDType
    openUUIDType:
      $ref: schemas/entityDataType.json#/OpenUUIDType
    numberType:
      $ref: schemas/entityDataType.json#/NumberType
    integerType:
      $ref: schemas/entityDataType.json#/IntegerType
    booleanType:
      $ref: schemas/entityDataType.json#/BooleanType
    dateType:
      $ref: schemas/entityDataType.json#/DateType
    enumType:
      $ref: schemas/entityDataType.json#/EnumType
    objectType:
      $ref: schemas/entityDataType.json#/ObjectType
    arrayType:
      $ref: schemas/entityDataType.json#/ArrayType
    entityTypeDefaultSort:
      $ref: schemas/entityTypeDefaultSort.json
    errors:
      $ref: schemas/error/errors.json
    error:
      $ref: schemas/error/error.json
    parameters:
      $ref: schemas/error/parameters.json
    parameter:
      $ref: schemas/error/parameter.json
    resultsetPage:
      $ref: schemas/resultset.json#/ResultsetPage
    queryDetails:
      $ref: schemas/query.json#/QueryDetails
    queryIdentifier:
      $ref: schemas/query.json#/QueryIdentifier
    columnValues:
      $ref: schemas/columnValues.json
    submitQuery:
      $ref: schemas/query.json#/SubmitQuery

  responses:
    badRequestResponse:
      description: Bad request errors
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
    internalServerErrorResponse:
      description: When unhandled exception occurred during code execution, e.g. NullPointerException
      content:
        application/json:
          example: examples/unknownError.sample
          schema:
            $ref: "#/components/schemas/errors"

